# Unique name for this workflow
name: Validate PR on develop branch

# Definition when the workflow should run
on:
  # The workflow will run whenever an event happens on a pull request
  pull_request:
    # The events are that a PR is opened, or when a commit is pushed
    # to a branch that has an existing pull request
    types: [opened, synchronize]
    # The branches filter allows to specify that this workflow should only
    # run if the branch name is "develop". This way we prevent this workflow
    # from running when PRs are opened on other branches
    branches: [develop]
    # We only care about changes to the force-app directory, which is the
    # root directory of the sfdx project. This prevents the job from running
    # when changing non-salesforce files (like this yml file).
    paths:
      - 'force-app/**'

# Jobs to be executed when the above conditions are met
jobs:
  # This is the name of the job. You can give it whatever name you want
  validate-deployment-on-develop-org:
    # As mentioned in the blog post, this job runs inside a VM. Here we
    # can specify which OS this VM should run on.
    # In this case, we are going to run our commands on the latest version
    # of ubuntu
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/smartinello1/sf-devops-container-1:main
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # The idea is that the VM can access your remote repository
      # because your repository is an sfdx project.
      # This is a default action that allows us to enter the root
      # directory of the repository

      # Make sure to specify fetch-depth:0. This allows us to
      # access previous commits that have been pushed to the repository.

      # We'll need this later when we try to figure out which metadata has
      # changed between commits, so that we can only deploy that metadata
      # to the destination org

      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Now, we need a way to let the developer specify which tests to run, which
      # could be all tests or just the tests relevant to their deployment.

      # To do this, we can ask the developer to name their test classes in the
      # body of the PR, using the following syntax

      # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
      # or Apex::[all]::Apex to run all tests

      # This special delimeter can be added to the PR template so that your
      # team doesn't have to remember the syntax.

      # Once a developer has specified a list of classes to run, we need to be able
      # to extract this information from the PR, and pass it on the the VM.

      - name: 'Read PR Body'
        env:
          # The pull request body is available through the github context object
          # we put the body of the pull request in an env variable (only available to this step)
          PR_BODY: ${{github.event.pull_request.body}}

        # Here we print the content of the environment variable and
        # pipe to a a text file.

        # Then we call the local script parsePR.js, which will create
        # a new file called testsToRun.txt. This file will have the list
        # of tests to run separated by a comma

        # Finally, we add the list of tests to the $GITHUB_ENV variable
        # as this allows us to reference the list in a subsequent step.  If you
        # were using a normal env variable, its value would not be available outside this step.
        run: |
          echo $PR_BODY > ./devops/pr_body.txt
          node ./devops/parsePR.js              
          TESTS=$(cat ./devops/testsToRun.txt)
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
          path: ./force-app/main/env

      # Authenticate with JWT
      - name: Authenticate JWT
        run: |
          echo "${{ secrets.SERVER_KEY }}" > SERVER_KEY.key
          sf org login jwt --client-id ${{ vars.CLIENT_ID }} --jwt-key-file SERVER_KEY.key --username ${{ vars.USERNAME }}

      # We use SFDX Git Delta to create a directory with only the metadata that has changed.
      # this allows us to deploy only those changes, as opposed to deploying the entire branch.
      # This helps reducing deployment times
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: |
          mkdir changed-sources
          sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

      # Now we can use the sfdx scanner to scan the code in the delta directory
      # The output of the scan is stored in a file called apexScanResults.sarif

      # The .sarif file can later be uploaded to github, so that we can see the
      # results of the scan directly from the PR.

      - name: 'Scan code'
        run: |
          cd changed-sources
          sf scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
          cd ..

      # Now we upload the .sarif file as explained in the previous step
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: changed-sources/apexScanResults.sarif

      # We do a check-only deploy and we only run the tests specified in the PR
      # If the env variable does not equal 'all', we know that there is a list of
      # tests that can be run

      - name: 'Check-only deploy delta changes - run specified tests'
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
          echo ${{env.APEX_TESTS}}
          sf project deploy start --dry-run --source-dir "changed-sources/force-app" --test-level RunSpecifiedTests --tests "${{env.APEX_TESTS}}" --concise

      # If the env variable equals all, we run all tests
      - name: 'Check-only deploy delta changes - run all tests'
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
          sf project deploy start --dry-run --source-dir "changed-sources/force-app" --test-level RunLocalTests  --concise

      - name: 'Deploy destructive changes (if any)'
        if: ${{ success() }}
        run: sf project deploy start --dry-run --source-dir "changed-sources/destructiveChanges" --ignorewarnings
